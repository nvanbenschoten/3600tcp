   __      ____     __      __   __                     
 /'__`\   /'___\  /'__`\  /'__`\/\ \__                  
/\_\L\ \ /\ \__/ /\ \/\ \/\ \/\ \ \ ,_\   ___   _____   
\/_/_\_<_\ \  _``\ \ \ \ \ \ \ \ \ \ \/  /'___\/\ '__`\ 
  /\ \L\ \\ \ \L\ \ \ \_\ \ \ \_\ \ \ \_/\ \__/\ \ \L\ \
  \ \____/ \ \____/\ \____/\ \____/\ \__\ \____\\ \ ,__/
   \/___/   \/___/  \/___/  \/___/  \/__/\/____/ \ \ \/ 
                                                  \ \_\ 
                                                   \/_/ 
--- Team America ---

Nathaniel Dempkowski and Nathan VanBenschoten

----------------------
High Level Approach
----------------------

To approach this project, we broke the problem into parts: a sender who creates packets, determines how much data to send at once, and delivers the data, and the receiver who takes in data as packets and returns acknowledgment packets. Like TCP, we decided upon the model of making our sender as smart and effective as possible, while generalizing the job of the receiver and making its job easy and quick.

For the sender we have a loop that runs until we have sent and acknowledged all of our data. This loop consists of three phases, creating packets to send, sending packets, and receiving acknowledgements. We first create packets until we fill up our window or run out of data to send. Next we send all of the packets as necessary, either sending all of the available packets in the window, or just sending one in the event of a fast retransmit. Finally we wait for received acknowledgements and process those, making adjustments to our window, timeout, and phase as necessary. We also do things like fast retransmit in response to these ACKs, which are discussed in greated detail below. In the event of a timeout we further adjust our window size and timeout. After receiving all of the ACKS for the data packets, we send the final EOF packet, which indicates that no more data will be sent, 3 times to easily ensure that it is not dropped/lost.

For the receiver, we tried to make the module as simple as possible. This meant that the receiver 
simply read in packets from the network, cached them in a window, and responded with acknowledgments accordingly. If the incoming packet has the next sequence number that hte receiver was looing for, it responds with an acknowlegment of the sequence number and delivers the data to the output. If the sequence number is below, it responds with an ack but does nothing with the data because it was already handled. If the sequence number is above, it caches the data and continues to send the sequence number of the last contiguous data packet it got in its ACKs. When the reciever recieves an EOF packet, it closes.

- Helper functions 

-- Generic (3600sendrecv.c)

get_checksum
Takes in a header, a pakcets data, and the length of the header, and returns the checksum that the packet should have. This is used to both create the checksum beofre sending a pakcet and validate a packet after it has been received. The checksum works by taking the 1's compliment sum of the header and the data (but not the checksum).

dump_packet
This functio nprints a hex dump of the provided packet to the screen. We used it occasionally while debugging to help analyze packet componenets. 

make_header
This function takes in the fields of the header and prodces a header stucture pointer. It was useful for reducing duplicate code and perfoming necessary host to network data type conversions. The function allocates the header, so it has to be freed by the user of the function laster.

get_header
This function returns the header from a packet. It was used to reduce duplicate code and to perform network to host conversion on on data types.

get_data
This function gets a pointer to the data from a passed in packet.

timestamp
This function returns a properly formatted timestamp, allowing us to time packet propagation delay and exponentially adjust our expected latency.

mylog
This function logs a debugging message, allowing us to debug to a log throughout out project.

-- Sender Specific (3600send.c)

usage
Prints command-line usage information for the 3600send program.

get_next_data
Reads the next block of data from STDIN of a certain size.

get_next_packet
Builds and returns the next packet in the sequence if there is more data to create packets for. This first creates a header for the packet, including information like the sequence number, length, and time. It then inserts the checksum in the packet, which is a checksum of both the header and the data combined. The data is then inserted into the packet, and a pointer to the packet is returned.

get_final_packet
Builds and returns the final packet that indicates all data has been sent. This is packet is essentially just a header with the EOF flag set and a checksum of the header attached.

update_timeouts
Updates the timeout values for waiting for acknowledgements for sent data packets. This keeps a moving exponential average of the RTT for a data packet and its acknowledgement in microseconds. This time is measured with the time field in the header, which is the time the packet was sent as the number of microseconds since the program started creating and sending packets. We used this because it provided a high degree of accuracy and was easily convertible into seconds and microseconds which our timeout timeval structure used.

----------------------
 Challenges Faced
----------------------

We faced a number of challenges while creating our transport protocol. The first of which was optimization of transport time and data size. We did that by implementing some of the complex features of TCP Reno described below. These posed a challenge because they forced us to completely redesign our sender's structure. When we had correctly implemented these features, we found that although our sender was better able to adapt to network latency, it often gave us a slower result. We found that this may have been because the network never dropped gongested packets, but instead just mildly delayed them. This meant that TCP-based assumptions such as "dropped packet = congestion" proved to be inaccurate.

Another challenge was dynamically determining the round trip latency. This was done by adding a timestamp to each packet as it was getting sent and reading this timestamp when the ack was recieved. When the reciver got a packet, it copied this packet's timestamp to the ack packet so that the sender would receive the same timestamp it sent. This allowed us to exponetially average the expected round trip latency and dynamically adjust our timeout.

Finally, while creating our checksum we faced another challenge. We initially included the checksum as part of our header structure. We found that this was very unreliable because during compilation, the checksum was moved around, and thus we could not conclusively state that the checksum would always be at the end of the header. Because of this, we moved the checksum out of the header and handled it seperately from creating the packet. The checksum was then copied right after the header so that it would remain at the top of the packet and always at the end of the header. 

----------------------
 Properties/Features
----------------------

We use a variable window and timeout in our protocol to try and avoid/detect problems efficiently. We use a moving exponential average of the round-trip times of each successful data packet to try and keep our timeout as accurate as possible.

Slow Start and Congestion Avoidance

Our transport protocol has two phases of transmission to try and make as efficient use of the network as possible. In the first phase, Slow Start, we quickly scale up our window size to try and grow to accomodate many different scales of networks quickly. To do this we increase our window size by 1 for every ACK we get back during this phase. This causes the window size to double for every successful round, scaling up very quickly. This phase completes upon receiving a duplicate ACK or timing out waiting for ACKs. This generally would indicate that some sort of problem or congestion has been hit, and that we should stop scaling up as quickly. We then cut our window size in half and move to the congestion avoidance phase. In that phase we increase our window by a small number dependent on the success of the previous round. Currently we use 1 per entirely successful round, but this can be changed. If timeouts occur we then scale back down the window size.

Fast Retransmit

Upon receiving a few duplicate ACKs (currently 5) we immediately resend the packet the ACKs are looking for and go back to receiving ACKs again. This hopefully helps to quickly resend dropped or corrupted packets as we assume that most packets in our networks will be okay.

Checksum

To assure the integrity of each of our packets against incorrect data caused during transmission, we added a checksum on to the end of each of the headers of each packet. This checksum was an 8-bit 1's compliment sum of the rest of the header, as well as the rest of the data in the packet. This allowed for the errors in the header or the data to be detected so we can drop the packet before its false data is used. This detection is allowed because we can take the checksum delivered on the packet, as well as compute an expected checksum from the header and data of the packet, and then compare them. If these two checksums are the same, the packet is valid, if not, the packet is invalid and tossed away.

----------------------
 Testing Procedure
----------------------

We based our testing on the provided test, as well as using the debug functions like dump_packet and 'print log' to make sure we were always sending and interpreting packets correctly and efficiently. During these tests we heavily used GDB to debug edge cases that we thought of and saw. Additionally, we made a few smaller testing programs to verify that our helper functions functioned correctly in all cases, allowing us to pinpoint errors that may have gone undetected otherwise. Throughout development we also modified the provided test to allow us to automatically test various specific cases. Additionally, we integrated git into our workflow as it provided a convenient tool for our workflow. In total we had ~40 commits. 

----------------------
 Bald Eagle
----------------------

                               /T /I
                              / |/ | .-~/
                          T\ Y  I  |/  /  _
         /T               | \I  |  I  Y.-~/
        I l   /I       T\ |  |  l  |  T  /
     T\ |  \ Y l  /T   | \I  l   \ `  l Y
 __  | \l   \l  \I l __l  l   \   `  _. |
 \ ~-l  `\   `\  \  \\ ~\  \   `. .-~   |
  \   ~-. "-.  `  \  ^._ ^. "-.  /  \   |
.--~-._  ~-  `  _  ~-_.-"-." ._ /._ ." ./
 >--.  ~-.   ._  ~>-"    "\\   7   7   ]
^.___~"--._    ~-{  .-~ .  `\ Y . /    |
 <__ ~"-.  ~       /_/   \   \I  Y   : |
   ^-.__           ~(_/   \   >._:   | l______
       ^--.,___.-~"  /_/   !  `-.~"--l_ /     ~"-.
              (_/ .  ~(   /'     "~"--,Y   -=b-. _)
               (_/ .  \  :           / l      c"~o \
                \ /    `.    .     .^   \_.-~"~--.  )
                 (_/ .   `  /     /       !       )/
                  / / _.   '.   .':      /        '
                  ~(_/ .   /    _  `  .-<_
                    /_/ . ' .-~" `.  / \  \          ,z=.
                    ~( /   '  :   | K   "-.~-.______//
                      "-,.    l   I/ \_    __{--->._(==.
                       //(     \  <    ~"~"     //
                      /' /\     \  \     ,v=.  ((
                    .^. / /\     "  }__ //===-  `
                   / / ' '  "-.,__ {---(==-
                 .^ '       :  T  ~"   ll      
                / .  .  . : | :!        \\			- Team America
               (_/  /   | | j-"          ~^
                 ~-<_(_.^-~"

			(Shamelessly stolen from the internet)
