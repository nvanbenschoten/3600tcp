ASCII art goes here.

--- Team America ---

Nathaniel Dempkowski and Nathan VanBenschoten

----------------------
 High Level Approach
----------------------

To approach this project, we broke the problem into parts: a sender who creates packets, determines how much data to send at once, and delivers the data, and the receiver who takes in data as packets and returns acknowledgment packets. Like TCP, we decided upon the model of making our sender as smart and effective as possible, while generalizing the job of the receiver and making its job easy and quick.

For the sender...

For the receiver, 

- Helper functions 

-- Generic (3600sendrecv.c)

get_checksum
Takes in a header, a pakcets data, and the length of the header, and returns the checksum that the packet should have. This is used to both create the checksum beofre sending a pakcet and validate a packet after it has been received. The checksum works by taking the 1's compliment of the header and the data (but not the checksum) and 

dump_packet

make_header

get_header

get_data

timestamp

mylog

-- Sender Specific (3600send.c)

usage
Prints command-line usage information for the 3600send program.

get_next_data
Reads the next block of data from STDIN of a certain size.

get_next_packet
Builds and returns the next packet in the sequence if there is more data to create packets for. This first creates a header for the packet, including information like the sequence number, length, and time. It then inserts the checksum in the packet, which is a checksum of both the header and the data combined. The data is then inserted into the packet, and a pointer to the packet is returned.

get_final_packet
Builds and returns the final packet that indicates all data has been sent. This is packet is essentially just a header with the EOF flag set and a checksum of the header attached.

update_timeouts
Updates the timeout values for waiting for acknowledgements for sent data packets. This keeps a moving exponential average of the RTT for a data packet and its acknowledgement in microseconds. This time is measured with the time field in the header, which is the time the packet was sent as the number of microseconds since the program started creating and sending packets. 

----------------------
 Challenges Faced
----------------------



----------------------
 Properties/Features
----------------------



Slow start and congestion avoidance

Fast retransmit

----------------------
 Testing Procedure
----------------------

We based our testing on the provided test, as well as using the debug functions like dump_packet and 'print log' to make sure we were always sending and interpreting packets correctly and efficiently. During these tests we heavily used GDB to debug edge cases that we thought of and saw. Additionally, we made a few smaller testing programs to verify that our helper functions functioned correctly in all cases, allowing us to pinpoint errors that may have gone undetected otherwise. Throughout development we also modified the provided test to allow us to automatically test various specific cases. Additionally, we integrated git into our workflow as it provided a convenient tool for our workflow. In total we had ~40 commits. 

----------------------
 Bald Eagle
----------------------

                               /T /I
                              / |/ | .-~/
                          T\ Y  I  |/  /  _
         /T               | \I  |  I  Y.-~/
        I l   /I       T\ |  |  l  |  T  /
     T\ |  \ Y l  /T   | \I  l   \ `  l Y
 __  | \l   \l  \I l __l  l   \   `  _. |
 \ ~-l  `\   `\  \  \\ ~\  \   `. .-~   |
  \   ~-. "-.  `  \  ^._ ^. "-.  /  \   |
.--~-._  ~-  `  _  ~-_.-"-." ._ /._ ." ./
 >--.  ~-.   ._  ~>-"    "\\   7   7   ]
^.___~"--._    ~-{  .-~ .  `\ Y . /    |
 <__ ~"-.  ~       /_/   \   \I  Y   : |
   ^-.__           ~(_/   \   >._:   | l______
       ^--.,___.-~"  /_/   !  `-.~"--l_ /     ~"-.
              (_/ .  ~(   /'     "~"--,Y   -=b-. _)
               (_/ .  \  :           / l      c"~o \
                \ /    `.    .     .^   \_.-~"~--.  )
                 (_/ .   `  /     /       !       )/
                  / / _.   '.   .':      /        '
                  ~(_/ .   /    _  `  .-<_
                    /_/ . ' .-~" `.  / \  \          ,z=.
                    ~( /   '  :   | K   "-.~-.______//
                      "-,.    l   I/ \_    __{--->._(==.
                       //(     \  <    ~"~"     //
                      /' /\     \  \     ,v=.  ((
                    .^. / /\     "  }__ //===-  `
                   / / ' '  "-.,__ {---(==-
                 .^ '       :  T  ~"   ll      
                / .  .  . : | :!        \\			- Team America
               (_/  /   | | j-"          ~^
                 ~-<_(_.^-~"

			(Shamelessly stolen from the internet)
